"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[55572],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var o=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=o.createContext({}),c=function(e){var t=o.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return a?o.createElement(f,l(l({ref:t},s),{},{components:a})):o.createElement(f,l({ref:t},s))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9300:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=a(87462),n=(a(67294),a(3905));const r={},l="load method",i={unversionedId:"talawa-mobile-docs/utils_app_localization/AppLocalizations/load",id:"talawa-mobile-docs/utils_app_localization/AppLocalizations/load",title:"load method",description:"Future&lt;bool> load",source:"@site/docs/talawa-mobile-docs/utils_app_localization/AppLocalizations/load.md",sourceDirName:"talawa-mobile-docs/utils_app_localization/AppLocalizations",slug:"/talawa-mobile-docs/utils_app_localization/AppLocalizations/load",permalink:"/docs/talawa-mobile-docs/utils_app_localization/AppLocalizations/load",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/utils_app_localization/AppLocalizations/load.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"isTest property",permalink:"/docs/talawa-mobile-docs/utils_app_localization/AppLocalizations/isTest"},next:{title:"loadTest method",permalink:"/docs/talawa-mobile-docs/utils_app_localization/AppLocalizations/loadTest"}},p={},c=[{value:"Implementation",id:"implementation",level:2}],s={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,o.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"load-method"},"load method"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-async/Future-class.html"},"Future"),"<",(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-core/bool-class.html"},"bool"),"> load\n()"),(0,n.kt)("h2",{id:"implementation"},"Implementation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"Future<bool> load() async {\n  // Load the language JSON file from the \"lang\" folder\n  final String jsonString =\n      await rootBundle.loadString('lang/${locale.languageCode}.json');\n  final Map<String, dynamic> jsonMap =\n      json.decode(jsonString) as Map<String, dynamic>;\n\n  _localizedStrings = jsonMap.map((key, value) {\n    return MapEntry(key, value.toString());\n  });\n\n  return true;\n}\n")))}u.isMDXComponent=!0}}]);