"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[47729],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,p=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return n?o.createElement(p,d(d({ref:t},c),{},{components:n})):o.createElement(p,d({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,d=new Array(a);d[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:r,d[1]=i;for(var s=2;s<a;s++)d[s]=n[s];return o.createElement.apply(null,d)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},70692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},d="addUserBottomSheet method",i={unversionedId:"talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet",id:"talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet",title:"addUserBottomSheet method",description:"void addUserBottomSheet",source:"@site/docs/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet.md",sourceDirName:"talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet",slug:"/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet",permalink:"/docs/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/addUserBottomSheet.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"EventBottomSheet constructor",permalink:"/docs/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet/"},next:{title:"EventBottomSheet class",permalink:"/docs/talawa-mobile-docs/widgets_add_members_bottom_sheet/EventBottomSheet-class"}},l={},s=[{value:"Implementation",id:"implementation",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adduserbottomsheet-method"},"addUserBottomSheet method"),(0,r.kt)("p",null,"void addUserBottomSheet\n({required ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/BuildContext-class.html"},"BuildContext")," context, required ",(0,r.kt)("a",{parentName:"p",href:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel-class"},"CreateEventViewModel")," model})"),(0,r.kt)("p",null,"This function creates a modal material design bottom sheet."),(0,r.kt)("p",null,"to let the user add admin or members to an organization.",(0,r.kt)("strong",null,"params"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"context"),": BuildContext"),(0,r.kt)("li",null,(0,r.kt)("code",null,"model"),": CreateEventViewModel")),(0,r.kt)("p",null,(0,r.kt)("strong",null,"returns"),": None"),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'void addUserBottomSheet({\n  required BuildContext context,\n  required CreateEventViewModel model,\n}) {\n  // Returns a Future that resolves to the value ("context") passed\n  // to Navigator.pop\n  showModalBottomSheet(\n    context: context,\n    shape: const RoundedRectangleBorder(\n      borderRadius: BorderRadius.only(\n        topLeft: Radius.circular(30),\n        topRight: Radius.circular(30),\n      ),\n    ),\n    isScrollControlled: true,\n    builder: (BuildContext context) {\n      return StatefulBuilder(\n        builder: (BuildContext context, StateSetter setState) {\n          return ClipRRect(\n            borderRadius: const BorderRadius.only(\n              topLeft: Radius.circular(30),\n              topRight: Radius.circular(30),\n            ),\n            child: Container(\n              height: MediaQuery.of(context).size.height * 0.8,\n              decoration: BoxDecoration(\n                color: Theme.of(context).scaffoldBackgroundColor,\n              ),\n              child: Padding(\n                padding: const EdgeInsets.all(10),\n                child: Column(\n                  children: [\n                    const Text(\n                      "Add Members",\n                      style: TextStyle(fontSize: 16),\n                    ),\n                    TextButton(\n                      key: const Key(\'text_btn_ambs1\'),\n                      onPressed: () {\n                        model.buildUserList();\n                        Navigator.pop(context);\n                      },\n                      child: const Text("Done"),\n                    ),\n                    const Divider(),\n                    FutureBuilder(\n                      // an admin can access the list of the members in an organization\n                      future: model.getCurrentOrgUsersList(),\n                      builder: (\n                        BuildContext context,\n                        AsyncSnapshot<List<User>> snapshot,\n                      ) {\n                        if (snapshot.data == null) {\n                          return const Center(\n                            child: CircularProgressIndicator(),\n                          );\n                        } else {\n                          return snapshot.data!.isEmpty\n                              ? const Center(\n                                  child: Text(\n                                    "There aren\'t any members in this organization.",\n                                  ),\n                                )\n                              // Displaying the list of the members\n                              : Flexible(\n                                  child: ListView.builder(\n                                    shrinkWrap: true,\n                                    itemCount: snapshot.data!.length,\n                                    itemBuilder: (context, index) {\n                                      return CheckboxListTile(\n                                        checkColor: Theme.of(context)\n                                            .colorScheme\n                                            .background,\n                                        activeColor: Theme.of(context)\n                                            .colorScheme\n                                            .primary,\n                                        title: Text(\n                                          "${snapshot.data![index].firstName!} ${snapshot.data![index].lastName!}",\n                                        ),\n                                        value: model.memberCheckedMap[\n                                            snapshot.data![index].id],\n                                        onChanged: (val) {\n                                          setState(\n                                            () {\n                                              model.memberCheckedMap[snapshot\n                                                  .data![index].id!] = val!;\n                                            },\n                                          );\n                                        },\n                                      );\n                                    },\n                                  ),\n                                );\n                        }\n                      },\n                    )\n                  ],\n                ),\n              ),\n            ),\n          );\n        },\n      );\n    },\n  );\n}\n')))}u.isMDXComponent=!0}}]);