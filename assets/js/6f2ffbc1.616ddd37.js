"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[216299],{213750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/fetchAndAddPlugins","title":"fetchAndAddPlugins method","description":"void fetchAndAddPlugins","source":"@site/docs/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/fetchAndAddPlugins.md","sourceDirName":"talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel","slug":"/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/fetchAndAddPlugins","permalink":"/docs/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/fetchAndAddPlugins","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/fetchAndAddPlugins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"Talawa","previous":{"title":"currentPageIndex property","permalink":"/docs/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/currentPageIndex"},"next":{"title":"focusTarget method","permalink":"/docs/talawa-mobile-docs/view_model_main_screen_view_model/MainScreenViewModel/focusTarget"}}');var i=t(474848),a=t(28453);const s={},l="fetchAndAddPlugins method",d={},c=[{value:"Implementation",id:"implementation",level:2}];function r(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fetchandaddplugins-method",children:"fetchAndAddPlugins method"})}),"\n",(0,i.jsxs)(n.p,{children:["void fetchAndAddPlugins\n(",(0,i.jsx)(n.a,{href:"https:api.flutter.dev/flutter/widgets/BuildContext-class.html",children:"BuildContext"})," context)"]}),"\n",(0,i.jsx)(n.p,{children:"<p>Dynamically adds <code>BottomNavigationBarItems</code> in <code>BottomNavigationBar</code>.</p>\n<p>by mapping over the data received from the server.</p>\n<p><strong>params</strong>:</p>\n<ul>\n<li><code>context</code>: its the same context you use everywhere in the flutter framework refer flutter docs for more info.</li>\n</ul>\n<p><strong>returns</strong>:\nNone</p>"}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void fetchAndAddPlugins(\n  BuildContext context,\n) \\{\n  navBarItems = [\n    BottomNavigationBarItem(\n      icon: Icon(\n        Icons.home,\n        key: keyBNHome,\n      ),\n      label: AppLocalizations.of(context)!.strictTranslate('Home'),\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(\n        Icons.event_note,\n        key: keyBNEvents,\n      ),\n      label: AppLocalizations.of(context)!.strictTranslate('Events'),\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(\n        Icons.add_box,\n        key: keyBNPost,\n      ),\n      label: AppLocalizations.of(context)!.strictTranslate('Add'),\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(\n        Icons.chat_outlined,\n        key: keyBNChat,\n      ),\n      label: AppLocalizations.of(context)!.strictTranslate('Chat'),\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(\n        Icons.account_circle,\n        key: keyBNProfile,\n      ),\n      label: AppLocalizations.of(context)!.strictTranslate('Profile'),\n    )\n  ];\n\n  pages = [\n    OrganizationFeed(\n      key: const Key(\"HomeView\"),\n      homeModel: this,\n    ),\n    ExploreEvents(\n      key: const Key('ExploreEvents'),\n      homeModel: this,\n    ),\n    AddPost(\n      key: const Key('AddPost'),\n      drawerKey: MainScreenViewModel.scaffoldKey,\n    ),\n    const ChatPage(\n      key: Key('Chats'),\n    ),\n    ProfilePage(\n      key: keySPEditProfile,\n      homeModel: this,\n    ),\n  ];\n\n  pluginList = (Hive.box('pluginBox').get('plugins') ?? []) as List\\<dynamic\\>;\n\n  pluginList.forEach((plugin) \\{\n    if (pluginPrototypeData.containsKey(\n          (plugin as Map\\<String, dynamic\\>)[\"pluginName\"] as String,\n        ) &&\n        plugin[\"pluginInstallStatus\"] as bool) \\{\n      navBarItems.add(\n        BottomNavigationBarItem(\n          icon: Icon(\n            (pluginPrototypeData[plugin[\"pluginName\"]]\n                as Map\\<String, dynamic\\>)[\"icon\"] as IconData,\n          ),\n          label: AppLocalizations.of(context)!.strictTranslate(\n            plugin[\"pluginName\"] as String,\n          ),\n        ),\n      );\n      pages.add(\n        (pluginPrototypeData[plugin[\"pluginName\"]]\n            as Map\\<String, dynamic\\>)[\"class\"] as StatelessWidget,\n      );\n    \\}\n  \\});\n\n  Causes the app check the plugins updates in every 300 sec\n  updated and re-render the navbar\n  Timer.periodic(const Duration(seconds: 300), (timer) \\{\n    FetchPluginList();\n    final newPluginList =\n        (Hive.box('pluginBox').get('plugins') ?? []) as List\\<dynamic\\>;\n\n    if (listEquals(pluginList, newPluginList)) \\{\n      notifyListeners();\n    \\}\n  \\});\n\\}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(296540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);