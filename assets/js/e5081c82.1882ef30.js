"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[11855],{85222:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var n=i(85893),o=i(11151);const a={},s="build method",l={id:"talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/build",title:"build method",description:"- @override",source:"@site/docs/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/build.md",sourceDirName:"talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog",slug:"/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/build",permalink:"/docs/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/build",draft:!1,unlisted:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/build.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"CustomAlertDialog constructor",permalink:"/docs/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/"},next:{title:"dialogSubTitle property",permalink:"/docs/talawa-mobile-docs/widgets_custom_alert_dialog/CustomAlertDialog/dialogSubTitle"}},d={},r=[{value:"Implementation",id:"implementation",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"build-method",children:"build method"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["@",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/dart-core/override-constant.html",children:"override"})]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/widgets/Widget-class.html",children:"Widget"})," build\n(",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/widgets/BuildContext-class.html",children:"BuildContext"})," context)"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:'<span class="feature">override</span>'})}),"\n",(0,n.jsxs)(t.p,{children:['<p>Describes the part of the user interface represented by this widget.</p>\n<p>The framework calls this method when this widget is inserted into the tree\nin a given <a href="https',":api",'.flutter.dev/flutter/widgets/BuildContext-class.html">BuildContext</a> and when the dependencies of this widget change\n(e.g., an <a href="https',":api",'.flutter.dev/flutter/widgets/InheritedWidget-class.html">InheritedWidget</a> referenced by this widget changes). This\nmethod can potentially be called in every frame and should not have any side\neffects beyond building a widget.</p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href="https',":api",'.flutter.dev/flutter/widgets/Widget/canUpdate.html">Widget.canUpdate</a>.</p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget\'s constructor and\nfrom the given <a href="https',":api",'.flutter.dev/flutter/widgets/BuildContext-class.html">BuildContext</a>.</p>\n<p>The given <a href="https',":api",'.flutter.dev/flutter/widgets/BuildContext-class.html">BuildContext</a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href="https',":api",'.flutter.dev/flutter/widgets/BuildContext-class.html">BuildContext</a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.</p>\n<p>The implementation of this method must only depend on:</p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand</li>\n<li>any ambient state obtained from the <code>context</code> using\n<a href="https',":api",'.flutter.dev/flutter/widgets/BuildContext/dependOnInheritedWidgetOfExactType.html">BuildContext.dependOnInheritedWidgetOfExactType</a>.</li>\n</ul>\n<p>If a widget\'s <a href="../../widgets_custom_alert_dialog/CustomAlertDialog/build.md">build</a> method is to depend on anything else, use a\n<a href="https',":api",'.flutter.dev/flutter/widgets/StatefulWidget-class.html">StatefulWidget</a> instead.</p>\n<p>See also:</p>\n<ul>\n<li><a href="https',":api",'.flutter.dev/flutter/widgets/StatelessWidget-class.html">StatelessWidget</a>, which contains the discussion on performance considerations.</li>\n</ul>']}),"\n",(0,n.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"@override\nWidget build(BuildContext context) \\{\n  final List\\<Widget\\> actions = [\n    RaisedRoundedButton(\n      key: const Key('Close'),\n      onTap: () =\\> secondaryButtonTap ?? navigationService.pop(),\n      buttonLabel:\n          AppLocalizations.of(context)!.strictTranslate(secondaryButtonText),\n      textColor: Colors.white,\n      backgroundColor: const Color(0xFF008A37),\n      width: SizeConfig.screenWidth! * 0.2,\n      height: SizeConfig.screenHeight! * 0.06,\n    ),\n    RaisedRoundedButton(\n      key: Key(successText ?? 'Confirm'),\n      onTap: () =\\> success(),\n      buttonLabel: successText ??\n          AppLocalizations.of(context)!.strictTranslate('Confirm'),\n      textColor: const Color(0xFF008A37),\n      backgroundColor: Colors.white,\n      width: SizeConfig.screenWidth! * 0.2,\n      height: SizeConfig.screenHeight! * 0.06,\n    )\n  ];\n  return AlertDialog(\n    title: Text(\n      dialogTitle ??\n          AppLocalizations.of(context)!.strictTranslate('Confirmation'),\n      style: Theme.of(context)\n          .textTheme\n          .headlineSmall!\n          .copyWith(fontWeight: FontWeight.w800),\n    ),\n    content: Text(dialogSubTitle),\n    buttonPadding: EdgeInsets.symmetric(\n      horizontal: SizeConfig.screenWidth! * 0.05,\n      vertical: SizeConfig.screenHeight! * 0.05,\n    ),\n    actions: reverse ? actions.reversed.toList() : actions,\n  );\n\\}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},11151:(e,t,i)=>{i.d(t,{Z:()=>l,a:()=>s});var n=i(67294);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);