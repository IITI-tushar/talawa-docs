"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[24127],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=r,f=u["".concat(d,".").concat(p)]||u[p]||m[p]||a;return t?o.createElement(f,i(i({ref:n},s),{},{components:t})):o.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},88408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={},i="donate method",l={unversionedId:"talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate",id:"talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate",title:"donate method",description:"void donate",source:"@site/docs/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate.md",sourceDirName:"talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage",slug:"/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate",permalink:"/docs/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/donate.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"build method",permalink:"/docs/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/build"},next:{title:"homeModel property",permalink:"/docs/talawa-mobile-docs/views_after_auth_screens_profile_profile_page/ProfilePage/homeModel"}},d={},c=[{value:"Implementation",id:"implementation",level:2}],s={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"donate-method"},"donate method"),(0,r.kt)("p",null,"void donate\n(",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/BuildContext-class.html"},"BuildContext")," context, ",(0,r.kt)("a",{parentName:"p",href:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_profile_view_models_profile_page_view_model/ProfilePageViewModel-class"},"ProfilePageViewModel")," model)"),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void donate(BuildContext context, ProfilePageViewModel model) {\n  showModalBottomSheet(\n    context: context,\n    isScrollControlled: true,\n    shape: const RoundedRectangleBorder(\n      borderRadius: BorderRadius.only(\n        topLeft: Radius.circular(30),\n        topRight: Radius.circular(30),\n      ),\n    ),\n    builder: (BuildContext context) {\n      return StatefulBuilder(\n        builder: (context, setState) {\n          model.attachListener(setState);\n          return ClipRRect(\n            borderRadius: const BorderRadius.only(\n              topLeft: Radius.circular(30),\n              topRight: Radius.circular(30),\n            ),\n            child: SizedBox(\n              height: model.bottomSheetHeight,\n              child: Scaffold(\n                // background color set to Primary\n                backgroundColor:\n                    Theme.of(context).colorScheme.primaryContainer,\n                // header\n                appBar: AppBar(\n                  centerTitle: true,\n                  automaticallyImplyLeading: false,\n                  backgroundColor: Colors.transparent,\n                  elevation: 0.0,\n                  toolbarHeight: SizeConfig.screenHeight! * 0.15,\n                  title: Padding(\n                    padding: const EdgeInsets.only(top: 8.0),\n                    // display title\n                    child: Text(\n                      'Donating to \\n${model.currentOrg.name}',\n                      style: Theme.of(context)\n                          .textTheme\n                          .headlineMedium!\n                          .copyWith(fontSize: 24),\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                      textAlign: TextAlign.center,\n                    ),\n                  ),\n                  actions: [\n                    Padding(\n                      padding: EdgeInsets.only(\n                        right: 8.0,\n                        top: SizeConfig.screenHeight! * 0.01,\n                      ),\n                      child: IconButton(\n                        icon: Icon(\n                          Icons.cancel,\n                          color: Theme.of(context).colorScheme.primary,\n                        ),\n                        onPressed: model.popBottomSheet,\n                      ),\n                    )\n                  ],\n                ),\n                body: SingleChildScrollView(\n                  // SingleChildScrollView is a box in which a single widget can be scrolled.\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.center,\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      SizedBox(\n                        height: SizeConfig.screenWidth! * 0.05,\n                      ),\n                      Text(\n                        'Please Select and amount',\n                        style: Theme.of(context).textTheme.headlineSmall,\n                      ),\n                      SizedBox(\n                        height: SizeConfig.screenWidth! * 0.05,\n                      ),\n                      Container(\n                        child: Row(\n                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                          // looping through and renders button for donation amounts.\n                          children: List.generate(\n                            3,\n                            (index) => model.dominationButton(\n                              model.denomination[index],\n                              context,\n                              setState,\n                            ),\n                          ),\n                        ),\n                      ),\n                      SizedBox(\n                        height: SizeConfig.screenWidth! * 0.05,\n                      ),\n                      Text(\n                        'Or',\n                        style: Theme.of(context).textTheme.headlineSmall,\n                      ),\n                      Text(\n                        'Input custom amount',\n                        style: Theme.of(context).textTheme.headlineSmall,\n                      ),\n                      SizedBox(\n                        height: SizeConfig.screenWidth! * 0.05,\n                      ),\n                      // containers for custom amount\n                      Container(\n                        padding: EdgeInsets.symmetric(\n                          horizontal: SizeConfig.screenWidth! * 0.05,\n                        ),\n                        child: TextField(\n                          controller: model.donationAmount,\n                          focusNode: model.donationField,\n                          textInputAction: TextInputAction.next,\n                          keyboardType: TextInputType.number,\n                          autofillHints: const <String>[AutofillHints.email],\n                          enableSuggestions: true,\n                          style: Theme.of(context).textTheme.titleLarge,\n                          onChanged: (text) {\n                            setState(() {});\n                          },\n                          decoration: InputDecoration(\n                            hintText: AppLocalizations.of(context)!\n                                .translate(\"Enter donation amount\"),\n                            labelText: AppLocalizations.of(context)!\n                                .translate(\"Enter custom donation amount\"),\n                            labelStyle:\n                                Theme.of(context).textTheme.titleMedium,\n                            prefixIcon: GestureDetector(\n                              onTap: () {\n                                model.changeCurrency(context, setState);\n                              },\n                              child: Padding(\n                                padding: const EdgeInsets.symmetric(\n                                  horizontal: 15.0,\n                                ),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.min,\n                                  children: [\n                                    Text(\n                                      model.donationCurrency,\n                                      textAlign: TextAlign.center,\n                                      style: Theme.of(context)\n                                          .textTheme\n                                          .headlineSmall,\n                                    ),\n                                    const Icon(\n                                      Icons.arrow_drop_down_circle_outlined,\n                                    )\n                                  ],\n                                ),\n                              ),\n                            ),\n                            enabledBorder: OutlineInputBorder(\n                              borderRadius: const BorderRadius.all(\n                                Radius.circular(12.0),\n                              ),\n                              borderSide: BorderSide(\n                                color:\n                                    Theme.of(context).colorScheme.secondary,\n                                width: 2,\n                              ),\n                            ),\n                            focusedBorder: OutlineInputBorder(\n                              borderRadius: const BorderRadius.all(\n                                Radius.circular(10.0),\n                              ),\n                              borderSide: BorderSide(\n                                color:\n                                    Theme.of(context).colorScheme.secondary,\n                              ),\n                            ),\n                          ),\n                        ),\n                      ),\n                      SizedBox(\n                        height: SizeConfig.screenWidth! * 0.05,\n                      ),\n                      ElevatedButton(\n                        onPressed: () async {\n                          ///required fields for donation transaction\n                          late final String userId;\n                          late final String orgId;\n                          late final String nameOfOrg;\n                          late final String nameOfUser;\n                          late final String payPalId;\n                          late final double amount;\n                          orgId = model.currentOrg.id!;\n                          userId = model.currentUser.id!;\n                          nameOfUser =\n                              \"${model.currentUser.firstName!} ${model.currentUser.lastName!}\";\n                          nameOfOrg = model.currentOrg.name!;\n\n                          amount = double.parse(model.donationAmount.text);\n                          final request = BraintreeDropInRequest(\n                            tokenizationKey:\n                                '<YOUR_BRAINTREE_SANDBOX_API_KEY>',\n                            collectDeviceData: true,\n                            paypalRequest: BraintreePayPalRequest(\n                              amount: model.donationAmount.text,\n                              displayName: \"Talawa\",\n                            ),\n                            cardEnabled: true,\n                          );\n\n                          final BraintreeDropInResult? result =\n                              await BraintreeDropIn.start(request);\n                          if (result != null) {\n                            ///saving the donation in server\n                            late final GraphQLClient client =\n                                graphqlConfig.clientToQuery();\n\n                            ///getting transaction id from `brainTree` API\n                            payPalId = result.paymentMethodNonce.nonce;\n\n                            final QueryResult donationResult =\n                                await client.mutate(\n                              MutationOptions(\n                                document: gql(\n                                  queries.createDonation(\n                                    userId,\n                                    orgId,\n                                    nameOfOrg,\n                                    nameOfUser,\n                                    payPalId,\n                                    amount,\n                                  ),\n                                ),\n                              ),\n                            );\n                            if (donationResult.hasException) {\n                              model.showSnackBar(\n                                \"Error occurred while making a donation\",\n                              );\n                            }\n\n                            /// hiding the donation UI once it is successful\n                            model.popBottomSheet();\n                            model.showSnackBar(\n                              'Donation Successful,Thanks for the support !',\n                            );\n                          }\n                        },\n                        style: ButtonStyle(\n                          backgroundColor: MaterialStateProperty.all(\n                            // if the donation amount entered or selected is empty then renders grey color\n                            // else render primary color\n                            model.donationAmount.text.isEmpty\n                                ? Colors.grey\n                                : Theme.of(context).colorScheme.primary,\n                          ),\n                        ),\n                        child: Text(\n                          'DONATE',\n                          style: Theme.of(context).textTheme.labelLarge,\n                        ),\n                      )\n                    ],\n                  ),\n                ),\n              ),\n            ),\n          );\n        },\n      );\n    },\n  ).then((value) => model.updateSheetHeight());\n}\n")))}m.isMDXComponent=!0}}]);