"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[86671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>_});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),v=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=v(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=v(n),c=i,_=s["".concat(d,".").concat(c)]||s[c]||u[c]||o;return n?a.createElement(_,r(r({ref:t},m),{},{components:n})):a.createElement(_,r({ref:t},m))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[s]="string"==typeof e?e:i,r[1]=l;for(var v=2;v<o;v++)r[v]=n[v];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>v});var a=n(87462),i=(n(67294),n(3905));const o={},r="updateEvent method",l={unversionedId:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent",id:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent",title:"updateEvent method",description:"Future&lt;void> updateEvent",source:"@site/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent.md",sourceDirName:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel",slug:"/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/updateEvent.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"titleFocus property",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/titleFocus"},next:{title:"validate property",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_edit_event_view_model/EditEventViewModel/validate"}},d={},v=[{value:"Implementation",id:"implementation",level:2}],m={toc:v},s="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"updateevent-method"},"updateEvent method"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-async/Future-class.html"},"Future"),"<","void> updateEvent\n()"),(0,i.kt)("p",null,"This function is used to update an event. The function uses ",(0,i.kt)("code",null,"editEvent")," function provided by ",(0,i.kt)("code",null,"eventService")," service."),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> updateEvent() async {\n  titleFocus.unfocus();\n  locationFocus.unfocus();\n  descriptionFocus.unfocus();\n  validate = AutovalidateMode.always;\n  if (formKey.currentState!.validate()) {\n    validate = AutovalidateMode.disabled;\n    final DateTime startTime = DateTime(\n      eventStartDate.year,\n      eventStartDate.month,\n      eventStartDate.day,\n      eventStartTime.hour,\n      eventStartTime.minute,\n    );\n    final DateTime endTime = DateTime(\n      eventEndDate.year,\n      eventEndDate.month,\n      eventEndDate.day,\n      eventEndTime.hour,\n      eventEndTime.minute,\n    );\n    // map for the required data to update an event.\n    final Map<String, dynamic> variables = {\n      'title': eventTitleTextController.text,\n      'description': eventDescriptionTextController.text,\n      'location': eventLocationTextController.text,\n      'isPublic': isPublicSwitch,\n      'isRegisterable': isRegisterableSwitch,\n      'recurring': false,\n      'allDay': false,\n      'startDate': DateFormat('yyyy-MM-dd').format(eventStartDate),\n      'endDate': DateFormat('yyyy-MM-dd').format(eventEndDate),\n      'startTime': '${DateFormat('HH:mm:ss').format(startTime)}Z',\n      'endTime': '${DateFormat('HH:mm:ss').format(endTime)}Z',\n    };\n    _eventService.editEvent(eventId: _event.id!, variables: variables);\n  }\n}\n")))}u.isMDXComponent=!0}}]);