"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[41922],{3905:(e,n,i)=>{i.d(n,{Zo:()=>u,kt:()=>g});var t=i(67294);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,o=function(e,n){if(null==e)return{};var i,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||(o[i]=e[i]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=t.createContext({}),d=function(e){var n=t.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},u=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var i=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(i),m=o,g=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return i?t.createElement(g,r(r({ref:n},u),{},{components:i})):t.createElement(g,r({ref:n},u))}));function g(e,n){var i=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<a;d++)r[d]=i[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}m.displayName="MDXCreateElement"},43982:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var t=i(87462),o=(i(67294),i(3905));const a={},r="login method",s={unversionedId:"talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login",id:"talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login",title:"login method",description:"Future&lt;void> login",source:"@site/docs/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login.md",sourceDirName:"talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel",slug:"/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login",permalink:"/docs/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/login.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"initialize method",permalink:"/docs/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/initialize"},next:{title:"password property",permalink:"/docs/talawa-mobile-docs/view_model_pre_auth_view_models_login_view_model/LoginViewModel/password"}},l={},d=[{value:"Implementation",id:"implementation",level:2}],u={toc:d},p="wrapper";function c(e){let{components:n,...i}=e;return(0,o.kt)(p,(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"login-method"},"login method"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-async/Future-class.html"},"Future"),"<","void> login\n()"),(0,o.kt)("p",null,"This function is used to sign-in the user into application."),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> login() async {\n  emailFocus.unfocus();\n  passwordFocus.unfocus();\n  validate = AutovalidateMode.always;\n  // if the email and password are not empty.\n  if (formKey.currentState!.validate()) {\n    validate = AutovalidateMode.disabled;\n    navigationService\n        .pushDialog(const CustomProgressDialog(key: Key('LoginProgress')));\n    databaseFunctions.init();\n    try {\n      // run the graph QL query to login the user, passing `email` and `password`.\n      final result = await databaseFunctions\n          .gqlNonAuthMutation(queries.loginUser(email.text, password.text));\n      navigationService.pop();\n      // if user found.\n      if (result != null) {\n        final User loggedInUser =\n            User.fromJson(result.data!['login'] as Map<String, dynamic>);\n        userConfig.updateUser(loggedInUser);\n        // if user has not already joined any organization.\n        if (userConfig.currentUser.joinedOrganizations!.isEmpty) {\n          navigationService.removeAllAndPush(\n            Routes.waitingScreen,\n            Routes.splashScreen,\n          );\n        } else {\n          userConfig.saveCurrentOrgInHive(\n            userConfig.currentUser.joinedOrganizations![0],\n          );\n          navigationService.removeAllAndPush(\n            Routes.mainScreen,\n            Routes.splashScreen,\n            arguments: MainScreenArgs(mainScreenIndex: 0, fromSignUp: false),\n          );\n        }\n        final loginResult = result.data['login'] as Map<String, dynamic>;\n        androidFirebaseOptions =\n            loginResult['androidFirebaseOptions'] as Map<String, dynamic>;\n        iosFirebaseOptions =\n            loginResult['iosFirebaseOptions'] as Map<String, dynamic>;\n        if (androidFirebaseOptions['apiKey'] != null ||\n            iosFirebaseOptions['apiKey'] != null) {\n          await setUpFirebase();\n\n          final token = await FirebaseMessaging.instance.getToken();\n          await databaseFunctions.gqlAuthMutation(\n            queries.saveFcmToken(token),\n          );\n\n          await setUpFirebaseMessaging();\n\n          final androidFirebaseOptionsBox =\n              await Hive.openBox('androidFirebaseOptions');\n          androidFirebaseOptionsBox.put(\n            'androidFirebaseOptions',\n            androidFirebaseOptions,\n          );\n\n          final iosFirebaseOptionsBox =\n              await Hive.openBox('iosFirebaseOptions');\n          iosFirebaseOptionsBox.put(\n            'iosFirebaseOptions',\n            iosFirebaseOptions,\n          );\n        }\n      }\n    } on Exception catch (e) {\n      print('here');\n      print(e);\n    }\n  }\n}\n")))}c.isMDXComponent=!0}}]);