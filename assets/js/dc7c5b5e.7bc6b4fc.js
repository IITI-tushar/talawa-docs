"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[10303],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var a=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,s=function(e,t){if(null==e)return{};var r,a,s={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,s=e.mdxType,n=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),m=s,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||n;return r?a.createElement(k,o(o({ref:t},u),{},{components:r})):a.createElement(k,o({ref:t},u))}));function k(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var n=r.length,o=new Array(n);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<n;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},62426:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var a=r(87462),s=(r(67294),r(3905));const n={},o="getTasksByUser method",i={unversionedId:"talawa-mobile-docs/services_task_service/TaskService/getTasksByUser",id:"talawa-mobile-docs/services_task_service/TaskService/getTasksByUser",title:"getTasksByUser method",description:"Future&lt;void> getTasksByUser",source:"@site/docs/talawa-mobile-docs/services_task_service/TaskService/getTasksByUser.md",sourceDirName:"talawa-mobile-docs/services_task_service/TaskService",slug:"/talawa-mobile-docs/services_task_service/TaskService/getTasksByUser",permalink:"/docs/talawa-mobile-docs/services_task_service/TaskService/getTasksByUser",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/services_task_service/TaskService/getTasksByUser.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"editTask method",permalink:"/docs/talawa-mobile-docs/services_task_service/TaskService/editTask"},next:{title:"getTasksForEvent method",permalink:"/docs/talawa-mobile-docs/services_task_service/TaskService/getTasksForEvent"}},c={},l=[{value:"Implementation",id:"implementation",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"gettasksbyuser-method"},"getTasksByUser method"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-async/Future-class.html"},"Future"),"<","void> getTasksByUser\n()"),(0,s.kt)("p",null,"This function is used to fetch and return all tasks added by the current user."),(0,s.kt)("h2",{id:"implementation"},"Implementation"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> getTasksByUser() async {\n  await _databaseMutationFunctions\n      .refreshAccessToken(_userConfig.currentUser.refreshToken!);\n  final res = await _databaseMutationFunctions\n      .gqlNonAuthQuery(TaskQueries.userTasks(_userConfig.currentUser.id!));\n\n  if (res != null) {\n    _tasks.clear();\n    final tasksList = res.data!['tasksByUser'] as List;\n    tasksList.forEach((task) {\n      _tasks.add(Task.fromJson(task as Map<String, dynamic>));\n    });\n  }\n}\n")))}p.isMDXComponent=!0}}]);