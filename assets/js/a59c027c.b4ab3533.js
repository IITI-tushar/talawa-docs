"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[8842],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>_});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,_=u["".concat(s,".").concat(m)]||u[m]||v[m]||o;return n?a.createElement(_,i(i({ref:t},c),{},{components:n})):a.createElement(_,i({ref:t},c))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50360:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>v,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={},i="createEvent method",l={unversionedId:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent",id:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent",title:"createEvent method",description:"Future&lt;void> createEvent",source:"@site/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent.md",sourceDirName:"talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel",slug:"/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/createEvent.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"buildUserList method",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/buildUserList"},next:{title:"descriptionFocus property",permalink:"/docs/talawa-mobile-docs/view_model_after_auth_view_models_event_view_models_create_event_view_model/CreateEventViewModel/descriptionFocus"}},s={},d=[{value:"Implementation",id:"implementation",level:2}],c={toc:d},u="wrapper";function v(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"createevent-method"},"createEvent method"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-async/Future-class.html"},"Future"),"<","void> createEvent\n()"),(0,r.kt)("p",null,"This function is used to create the event for the organization."),(0,r.kt)("p",null,"The function uses ",(0,r.kt)("code",null,"database_mutation_functions")," services to call the graphQL mutation for creating an event and passes the required variables for the event."),(0,r.kt)("p",null,(0,r.kt)("strong",null,"params"),": None"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"Future<void>"),": Asynchronous function for creating event")),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> createEvent() async {\n  titleFocus.unfocus();\n  locationFocus.unfocus();\n  descriptionFocus.unfocus();\n  validate = AutovalidateMode.always;\n  if (formKey.currentState!.validate()) {\n    validate = AutovalidateMode.disabled;\n\n    // variables initialisation\n    final DateTime startDate = eventStartDate;\n    final DateTime endDate = eventEndDate;\n    final DateTime startTime = DateTime(\n      startDate.year,\n      startDate.month,\n      startDate.day,\n      eventStartTime.hour,\n      eventStartTime.minute,\n    );\n    final DateTime endTime = DateTime(\n      endDate.year,\n      endDate.month,\n      endDate.day,\n      eventEndTime.hour,\n      eventEndTime.minute,\n    );\n\n    // all required data for creating an event\n    final Map<String, dynamic> variables = {\n      'startDate': DateFormat('yyyy-MM-dd').format(startDate),\n      'endDate': DateFormat('yyyy-MM-dd').format(endDate),\n      'organizationId': _currentOrg.id,\n      'title': eventTitleTextController.text,\n      'description': eventDescriptionTextController.text,\n      'location': eventLocationTextController.text,\n      'isPublic': isPublicSwitch,\n      'isRegisterable': isRegisterableSwitch,\n      'recurring': false,\n      'allDay': false,\n      'startTime': '${DateFormat('HH:mm:ss').format(startTime)}Z',\n      'endTime': '${DateFormat('HH:mm:ss').format(endTime)}Z',\n      if (latitude != null) 'latitude': latitude,\n      if (longitude != null) 'longitude': longitude,\n    };\n\n    navigationService.pushDialog(\n      const CustomProgressDialog(key: Key('EventCreationProgress')),\n    );\n    final tokenResult = await databaseFunctions\n        .refreshAccessToken(userConfig.currentUser.refreshToken!);\n    print(tokenResult);\n    // invoke the `gqlAuthMutation` function of `databaseFunctions`\n    // service along with the mutation query and variable map.\n    final result = await databaseFunctions.gqlAuthMutation(\n      EventQueries().addEvent(),\n      variables: variables,\n    );\n    navigationService.pop();\n    if (result != null) {\n      navigationService.pop();\n\n      await _eventService.getEvents();\n    }\n  }\n}\n")))}v.isMDXComponent=!0}}]);