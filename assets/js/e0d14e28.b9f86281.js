"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[892586],{676297:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/currentPlatform","title":"currentPlatform method","description":"FirebaseOptions currentPlatform","source":"@site/docs/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/currentPlatform.md","sourceDirName":"talawa-mobile-docs/firebase_options/DefaultFirebaseOptions","slug":"/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/currentPlatform","permalink":"/docs/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/currentPlatform","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/currentPlatform.md","tags":[],"version":"current","frontMatter":{},"sidebar":"Talawa","previous":{"title":"android method","permalink":"/docs/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/android"},"next":{"title":"ios method","permalink":"/docs/talawa-mobile-docs/firebase_options/DefaultFirebaseOptions/ios"}}');var n=r(474848),o=r(28453);const i={},s="currentPlatform method",l={},c=[{value:"Implementation",id:"implementation",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"currentplatform-method",children:"currentPlatform method"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https:pub.dev/documentation/firebase_core_platform_interface/4.8.0/firebase_core_platform_interface/FirebaseOptions-class.html",children:"FirebaseOptions"})," currentPlatform\n(",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/dart-core/Map-class.html",children:"Map"}),"<",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/dart-core/String-class.html",children:"String"}),", dynamic> androidFirebaseOptions, ",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/dart-core/Map-class.html",children:"Map"}),"<",(0,n.jsx)(t.a,{href:"https:api.flutter.dev/flutter/dart-core/String-class.html",children:"String"}),", dynamic> iosFirebaseOptions)"]}),"\n",(0,n.jsxs)(t.p,{children:['<p>Builds and returns <a href="https',":pub",'.dev/documentation/firebase_core_platform_interface/4.8.0/firebase_core_platform_interface/FirebaseOptions-class.html">FirebaseOptions</a> based on the current platform.</p>\n<p>Switches on the current platform and calls <a href="../../firebase_options/DefaultFirebaseOptions/android.md">android</a> or <code>iOS</code>\nmethods accordingly to build the <a href="https',":pub",'.dev/documentation/firebase_core_platform_interface/4.8.0/firebase_core_platform_interface/FirebaseOptions-class.html">FirebaseOptions</a>. Throws\n<a href="https',":api",'.flutter.dev/flutter/dart-core/UnsupportedError-class.html">UnsupportedError</a> if the platform is other than these two.</p>\n<p><strong>params</strong>:</p>\n<ul>\n<li><code>androidFirebaseOptions</code>: Firebase Options for Android</li>\n<li><code>iosFirebaseOptions</code>: Firebase Options for iOS</li>\n</ul>\n<p><strong>returns</strong>:</p>\n<ul>\n<li><code>FirebaseOptions</code>: The <a href="https',":pub",'.dev/documentation/firebase_core_platform_interface/4.8.0/firebase_core_platform_interface/FirebaseOptions-class.html">FirebaseOptions</a> built according to the platform.</li>\n</ul>']}),"\n",(0,n.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"static FirebaseOptions currentPlatform(\n  Map\\<String, dynamic\\> androidFirebaseOptions,\n  Map\\<String, dynamic\\> iosFirebaseOptions,\n) \\{\n  if (kIsWeb) \\{\n    throw UnsupportedError(\n      'DefaultFirebaseOptions have not been configured for web - '\n      'you can reconfigure this by running the FlutterFire CLI again.',\n    );\n  \\}\n  switch (defaultTargetPlatform) \\{\n    case TargetPlatform.android:\n      return android(androidFirebaseOptions);\n    case TargetPlatform.iOS:\n      return ios(iosFirebaseOptions);\n    case TargetPlatform.macOS:\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for macos - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    default:\n      throw UnsupportedError(\n        'DefaultFirebaseOptions are not supported for this platform.',\n      );\n  \\}\n\\}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var a=r(296540);const n={},o=a.createContext(n);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);