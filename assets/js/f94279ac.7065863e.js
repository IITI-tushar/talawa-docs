"use strict";(self.webpackChunktalawa_docs=self.webpackChunktalawa_docs||[]).push([[57445],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),u=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),p=n,g=d["".concat(o,".").concat(p)]||d[p]||h[p]||s;return r?a.createElement(g,l(l({ref:t},c),{},{components:r})):a.createElement(g,l({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,l=new Array(s);l[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<s;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},25432:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const s={},l="buildSuggestions method",i={unversionedId:"talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions",id:"talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions",title:"buildSuggestions method",description:"- @override",source:"@site/docs/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions.md",sourceDirName:"talawa-mobile-docs/widgets_event_search_delegate/EventSearch",slug:"/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions",permalink:"/docs/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions",draft:!1,editUrl:"https://github.com/PalisadoesFoundation/talawa-docs/edit/develop/docs/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestions.md",tags:[],version:"current",frontMatter:{},sidebar:"Talawa",previous:{title:"buildResults method",permalink:"/docs/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildResults"},next:{title:"buildSuggestionsSucess method",permalink:"/docs/talawa-mobile-docs/widgets_event_search_delegate/EventSearch/buildSuggestionsSucess"}},o={},u=[{value:"Implementation",id:"implementation",level:2}],c={toc:u},d="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"buildsuggestions-method"},"buildSuggestions method"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"@",(0,n.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/dart-core/override-constant.html"},"override"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/Widget-class.html"},"Widget")," buildSuggestions\n(",(0,n.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/BuildContext-class.html"},"BuildContext")," context)"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("span",{class:"feature"},"override"))),(0,n.kt)("p",null,"Suggestions shown in the body of the search page while the user types a query into the search field."),(0,n.kt)("p",null,"The delegate method is called whenever the content of ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/SearchDelegate/query.html"},"query")," changes. The suggestions should be based on the current ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/SearchDelegate/query.html"},"query")," string. If the query string is empty, it is good practice to show suggested queries based on past queries or the current context."),(0,n.kt)("p",null,"Usually, this method will return a ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/widgets/ListView-class.html"},"ListView")," with one ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/ListTile-class.html"},"ListTile")," per suggestion. When ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/ListTile/onTap.html"},"ListTile.onTap")," is called, ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/SearchDelegate/query.html"},"query")," should be updated with the corresponding suggestion and the results page should be shown by calling ",(0,n.kt)("a",{href:"https://api.flutter.dev/flutter/material/SearchDelegate/showResults.html"},"showResults"),"."),(0,n.kt)("h2",{id:"implementation"},"Implementation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},'@override\nWidget buildSuggestions(BuildContext context) {\n  /// Returns a scrollable list through "buildSuggestionsSuccess" function.\n  /// where() method Returns a new lazy Iterable with all elements that satisfy the predicate test.\n  /// toList( ) method is used to convert an Iterable to a List.\n  /// toLowerCase() converts all characters in a string to lower case.\n  final suggestions = eventList.where((event) {\n    final eventLowerCase = event.title!.toLowerCase();\n    final queryLowerCase = query.toLowerCase();\n    return eventLowerCase.startsWith(queryLowerCase);\n  }).toList();\n  return buildSuggestionsSucess(suggestions);\n}\n')))}h.isMDXComponent=!0}}]);